// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // runtime (pooler ou direto)
  directUrl = env("DIRECT_URL") // migraÃ§Ãµes/seed (conexÃ£o direta)
}

/**
 * ===========================
 * CATEGORIES
 * ===========================
 */
model Category {
  id       String            @id @default(cuid())
  name     String
  slug     String            @unique
  parent   Category?         @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId String?
  children Category[]        @relation("CategoryToCategory")
  products ProductCategory[]

  @@index([parentId])
  @@index([slug])
  @@index([name])
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@id([productId, categoryId])
  @@index([categoryId])
  @@index([productId])
}

/**
 * ===========================
 * PRODUCTS
 * ===========================
 */
model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  url       String
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([sortOrder])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal
  imageUrl    String
  active      Boolean  @default(true)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sortOrder   Int      @default(0)

  packageSize String?
  pdfUrl      String?

  // Public visibility flags (alinhado ao seu DB: defaults)
  visibleDescription Boolean @default(true)
  visibleImages      Boolean @default(true)
  visiblePackageSize Boolean @default(true)
  visiblePdf         Boolean @default(true)
  visiblePrice       Boolean @default(false)

  categories ProductCategory[]
  promotions Promotion[]
  orderItems OrderItem[]
  images     ProductImage[]

  // âœ… Variants (1:N)
  variants ProductVariant[]

  @@index([active, sortOrder])
  @@index([createdAt])
  @@index([name])
}

model ProductVariant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String

  name      String
  price     Decimal @db.Decimal(12, 2)
  stock     Int     @default(0)
  active    Boolean @default(true)
  sortOrder Int     @default(0)
  sku       String?

  // ðŸ‘‡ NOVO: capa opcional + galeria da variante
  imageUrl String?
  images   ProductVariantImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // jÃ¡ existia
  orderItems OrderItem[] @relation("VariantToOrderItems")

  @@index([productId])
  @@index([active, sortOrder])
}

model ProductVariantImage {
  id        String         @id @default(cuid())
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId String
  url       String
  sortOrder Int            @default(0)
  createdAt DateTime       @default(now())

  @@index([variantId])
  @@index([sortOrder])
}

model Promotion {
  id          String   @id @default(cuid())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String
  title       String
  description String?
  percentOff  Int?
  priceOff    Decimal?
  startsAt    DateTime
  endsAt      DateTime
  active      Boolean  @default(true)

  @@index([productId, active, startsAt, endsAt])
}

/**
 * ===========================
 * USERS
 * ===========================
 */
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
}

/**
 * ===========================
 * CRM: CUSTOMER & ADDRESS
 * ===========================
 */
model Customer {
  id             String   @id @default(cuid())
  email          String   @unique
  phone          String?
  name           String
  company        String?
  marketingOptIn Boolean  @default(false)
  tags           String[] @default([])
  note           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  addresses Address[]
  orders    OrderInquiry[] // pedidos vinculados

  @@index([name])
  @@index([phone])
  @@map("Contact") // mantÃ©m compat com a tabela existente "Contact"
}

model Address {
  id         String    @id @default(cuid())
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customerId String?
  line1      String
  line2      String?
  district   String?
  city       String
  state      String?
  postalCode String?
  country    String    @default("US")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  ordersAsShipping OrderInquiry[] @relation("OrderInquiryToAddress")

  @@index([customerId])
  @@index([city])
  @@index([postalCode])
}

/**
 * ===========================
 * ORDERS
 * ===========================
 */
model OrderInquiry {
  id String @id @default(cuid())

  // Customer snapshot
  customerName  String
  customerEmail String
  customerPhone String?

  note      String?
  adminNote String?
  status    String   @default("RECEIVED") // RECEIVED|IN_PROGRESS|COMPLETED|REFUSED|CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items OrderItem[]

  // Customer relation (CRM)
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customerId String?

  // Shipping address (optional)
  address   Address? @relation("OrderInquiryToAddress", fields: [addressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  addressId String?

  // Optional recurrence
  recurrence   String?
  intervalDays Int?

  // Totals (as quote snapshot)
  subtotal Decimal @default(0)
  total    Decimal @default(0)
  currency String  @default("USD")

  @@index([status, createdAt])
  @@index([customerEmail])
  @@index([customerId])
  @@index([addressId])
  @@map("OrderInquiry")
}

model OrderItem {
  id      String       @id @default(cuid())
  order   OrderInquiry @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId String

  quantity  Int
  unitPrice Decimal

  // Variant (optional) + snapshot name
  variant     ProductVariant? @relation("VariantToOrderItems", fields: [variantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  variantId   String?
  variantName String?

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}
